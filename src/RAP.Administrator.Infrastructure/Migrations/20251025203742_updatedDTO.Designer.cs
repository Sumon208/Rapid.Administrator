// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace RAP.Administrator.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251025203742_updatedDTO")]
    partial class updatedDTO
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.ActionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActionType");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.CandidateAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActionUserAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidateAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.CandidateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("TeamId");

                    b.ToTable("Candidates", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.CandidateExport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExportedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExportedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidateExports", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.CandidateLocalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LocalizedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidateLocalizations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PositionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CandidatePositions", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TeamName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CandidateTeams", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Divisions.ActionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CandidateActionTypes", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Divisions.Division", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DivisionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("StatusTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Divisions", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Divisions.DivisionAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ActionAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ActionUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<short?>("StatusTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("DivisionAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Divisions.DivisionExport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("DivisionExports", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Divisions.DivisionLocalization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("LocalizedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("DivisionLocalizations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Insurance.EmployeeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Insurance.ExportInsuranceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExportFormat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExportedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExportedByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("InsuranceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceId");

                    b.ToTable("ExportInsurance", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Insurance.InsuranceAuditEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActionUserAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("InsuranceId")
                        .HasColumnType("int");

                    b.Property<string>("InsuranceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceId");

                    b.ToTable("InsuranceAudit", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Insurance.InsuranceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Branch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("InsuranceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Insurance", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Insurance.InsuranceLocalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("InsuranceId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceId");

                    b.ToTable("InsuranceLocalization", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ShiftType.ShiftType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("BreakTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShiftTypes", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ShiftType.ShiftTypeAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ActionAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ActionUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("BreakTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ShiftTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShiftTypeId");

                    b.ToTable("ShiftTypeAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ShiftType.ShiftTypeExport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("ShiftTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ShiftTypeId");

                    b.ToTable("ShiftTypeExports", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ShiftType.ShiftTypeLocalization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("LocalizedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ShiftTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ShiftTypeId");

                    b.ToTable("ShiftTypeLocalizations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Tax.TaxAuditEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActionUserAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Dail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("MapURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StatusId")
                        .HasColumnType("bit");

                    b.Property<int?>("TaxEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaxEntityId");

                    b.ToTable("TaxAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Tax.TaxEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DraftedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IBANNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<decimal>("OpeningBalance")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Taxes", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Transfer.TransferAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActionAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("FromLocationId")
                        .HasColumnType("int");

                    b.Property<string>("IqamaNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValuesJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValuesJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ToLocationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TransferDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TransferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransferId");

                    b.ToTable("TransferAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Transfer.TransferBranchEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransferBranches", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Transfer.TransferEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Descriptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromLocationId")
                        .HasColumnType("int");

                    b.Property<string>("IqamaNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ToLocationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TransferDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Transfers", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Transfer.TransferExport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ExportedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExportedById")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TransferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransferId");

                    b.ToTable("TransferExports", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Transfer.TransferFromLocationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransferFromLocations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Transfer.TransferIqamaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransferIqamas", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Transfer.TransferLocalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TransferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransferId");

                    b.ToTable("TransferLocalizations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Transfer.TransferToLocationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransferToLocations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.CandidateAudit", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.CandidateSelection.ActionType", "ActionType")
                        .WithMany("CandidateAudits")
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RAP.Administrator.Domain.Models.CandidateSelection.CandidateEntity", "Candidate")
                        .WithMany("Audits")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ActionType");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.CandidateEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.CandidateSelection.Position", "Position")
                        .WithMany("CandidateSelections")
                        .HasForeignKey("PositionId");

                    b.HasOne("RAP.Administrator.Domain.Models.CandidateSelection.Team", "Team")
                        .WithMany("CandidateSelections")
                        .HasForeignKey("TeamId");

                    b.Navigation("Position");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.CandidateExport", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.CandidateSelection.CandidateEntity", "Candidate")
                        .WithMany("Exports")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.CandidateLocalization", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.CandidateSelection.CandidateEntity", "Candidate")
                        .WithMany("Localizations")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Divisions.DivisionAudit", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Divisions.Division", "Division")
                        .WithMany("Audits")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Divisions.DivisionExport", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Divisions.Division", "Division")
                        .WithMany("Exports")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Divisions.DivisionLocalization", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Divisions.Division", "Division")
                        .WithMany("Localizations")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Insurance.ExportInsuranceEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Insurance.InsuranceEntity", "Insurance")
                        .WithMany("ExportInsurances")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Insurance.InsuranceAuditEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Insurance.InsuranceEntity", "Insurance")
                        .WithMany("Audits")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Insurance.InsuranceEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Insurance.EmployeeEntity", "Employee")
                        .WithMany("Insurances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Insurance.InsuranceLocalization", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Insurance.InsuranceEntity", "Insurance")
                        .WithMany("Localizations")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ShiftType.ShiftTypeAudit", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.ShiftType.ShiftType", "ShiftType")
                        .WithMany("Audits")
                        .HasForeignKey("ShiftTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShiftType");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ShiftType.ShiftTypeExport", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.ShiftType.ShiftType", "ShiftType")
                        .WithMany("Exports")
                        .HasForeignKey("ShiftTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShiftType");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ShiftType.ShiftTypeLocalization", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.ShiftType.ShiftType", "ShiftType")
                        .WithMany("Localizations")
                        .HasForeignKey("ShiftTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShiftType");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Tax.TaxAuditEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Tax.TaxEntity", null)
                        .WithMany("Audits")
                        .HasForeignKey("TaxEntityId");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Transfer.TransferAudit", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Transfer.TransferEntity", "Transfer")
                        .WithMany("Audits")
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Transfer.TransferExport", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Transfer.TransferEntity", "Transfer")
                        .WithMany("Exports")
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Transfer.TransferLocalization", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Transfer.TransferEntity", "Transfer")
                        .WithMany("Localizations")
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.ActionType", b =>
                {
                    b.Navigation("CandidateAudits");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.CandidateEntity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Exports");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.Position", b =>
                {
                    b.Navigation("CandidateSelections");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.Team", b =>
                {
                    b.Navigation("CandidateSelections");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Divisions.Division", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Exports");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Insurance.EmployeeEntity", b =>
                {
                    b.Navigation("Insurances");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Insurance.InsuranceEntity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("ExportInsurances");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ShiftType.ShiftType", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Exports");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Tax.TaxEntity", b =>
                {
                    b.Navigation("Audits");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Transfer.TransferEntity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Exports");

                    b.Navigation("Localizations");
                });
#pragma warning restore 612, 618
        }
    }
}
