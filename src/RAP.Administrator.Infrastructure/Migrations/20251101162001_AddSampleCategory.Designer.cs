// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace RAP.Administrator.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251101162001_AddSampleCategory")]
    partial class AddSampleCategory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Branches.BankListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BankName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("BankLists", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Branches.BranchAuditEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActionUserAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Dail")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("IP")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("Location")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(9,6)");

                    b.Property<string>("MapURL")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("OS")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool?>("StatusId")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("BranchesAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Branches.BranchEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BankId")
                        .HasColumnType("int");

                    b.Property<int?>("BankListEntityId")
                        .HasColumnType("int");

                    b.Property<string>("BranchArabic")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BranchName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyListEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("CountryListEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrencyId")
                        .HasColumnType("int");

                    b.Property<int?>("CurrencyListEntityId")
                        .HasColumnType("int");

                    b.Property<string>("CurrencySymbol")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("InvoiceFormatListEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PostCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PrintFormat")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("State")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("VATNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("BankListEntityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyListEntityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CountryListEntityId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CurrencyListEntityId");

                    b.HasIndex("InvoiceFormatListEntityId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("MSDBranches", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Branches.BranchExport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExportedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long?>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("FileType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("BranchesExports", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Branches.BranchLocalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLocalized")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("BranchesLocalizations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Branches.CompanyListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("CompanyLists", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Branches.CurrencyListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Currency")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("CurrencyLists", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Branches.InvoiceFormatListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("InVoiceFormat")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("InvoiceFormats", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateList.CandidateListAudit", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActionUserAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidateListAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateList.CandidateListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AlternatePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PermanentAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresentAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SSN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("CandidateLists", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateList.CandidateListExport", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("ExportData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExportType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExportedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExportedBy")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CandidateListExports", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateList.CandidateListLocalization", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidateListLocalizations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateList.CountryListEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CountryListEntity");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.ActionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActionType");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.CandidateAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActionUserAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActionTypeId");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidateAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.CandidateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("TeamId");

                    b.ToTable("Candidates", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.CandidateExport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExportedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExportedByUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidateExports", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.CandidateLocalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CandidateId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LocalizedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("CandidateLocalizations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("PositionName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CandidatePositions", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TeamName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CandidateTeams", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Certificate.CertificateAuditEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActionUserAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CertificateId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MapURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StatusId")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.ToTable("CertificateAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Certificate.CertificateEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActionTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificateNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CertificateTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("GeneralManager")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabManager")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CertificateTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Certificates", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Certificate.CertificateExportEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CertificateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExportedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExportedBy")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.ToTable("CertificateExports", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Certificate.CertificateLocalizationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CertificateId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CertificateId");

                    b.ToTable("CertificateLocalizations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Certificate.CertificateTypeListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CertificateTypeLists", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ContactType.ContactTypeAuditEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActionUserAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ContactTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Dail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("MapURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StatusId")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.ToTable("ContactTypeAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ContactType.ContactTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactTypes", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ContactType.ContactTypeExportEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExportedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExportedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactTypeExports", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ContactType.ContactTypeLocalizationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContactTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.ToTable("ContactTypeLocalizations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Divisions.ActionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CandidateActionTypes", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Divisions.Division", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DivisionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("StatusTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("Divisions", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Divisions.DivisionAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ActionAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ActionUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<short?>("StatusTypeId")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("DivisionAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Divisions.DivisionExport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("DivisionExports", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Divisions.DivisionLocalization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("DivisionId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("LocalizedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.ToTable("DivisionLocalizations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Document.DocumentAuditEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActionUserAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<string>("IP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MapURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StatusId")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Document.DocumentEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DocumentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrderById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PIDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PINo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShipmentTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderById");

                    b.HasIndex("ShipmentTypeId");

                    b.ToTable("Documents", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Document.DocumentExportEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExportedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExportedBy")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentExports", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Document.DocumentLocalizationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DocumentId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentLocalizations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Document.OrderByEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderByLists", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Document.ShipmentTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShipmentTypeLists", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.DocumentType.DocumentCodeTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DocumentCodeTemplates", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.DocumentType.DocumentTypeAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActionUserAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Code")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("IP")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("MapURL")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OS")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool?>("StatusId")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("DocumentTypeAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.DocumentType.DocumentTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("StatusId")
                        .HasColumnType("bit");

                    b.Property<int?>("TemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TemplateId");

                    b.ToTable("DocumentTypes", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.DocumentType.DocumentTypeExport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ExportFileName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("ExportedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExportedBy")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("DocumentTypeExports", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.DocumentType.DocumentTypeLocalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("DocumentTypeLocalizations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.EmployeeContract.ContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactType", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.EmployeeContract.ContractStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContractStatus", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.EmployeeContract.EmployeeContractAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActionUserAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeContractEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeContractId")
                        .HasColumnType("int");

                    b.Property<string>("IP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MapURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeContractEntityId");

                    b.ToTable("EmployeeContractAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.EmployeeContract.EmployeeContractEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContactTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactTypeId1")
                        .HasColumnType("int");

                    b.Property<int?>("ContractStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EffectiveDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SalaryAllowanceId")
                        .HasColumnType("int");

                    b.Property<int?>("SalaryAllowanceId1")
                        .HasColumnType("int");

                    b.Property<int?>("StaffId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("ContactTypeId1");

                    b.HasIndex("ContractStatusId");

                    b.HasIndex("EmployeeEntityId");

                    b.HasIndex("SalaryAllowanceId");

                    b.HasIndex("SalaryAllowanceId1");

                    b.HasIndex("StaffId");

                    b.HasIndex("StatusId");

                    b.ToTable("EmployeeContracts", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.EmployeeContract.EmployeeContractExport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EmployeeContractId")
                        .HasColumnType("int");

                    b.Property<string>("ExportFormat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExportedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExportedBy")
                        .HasColumnType("int");

                    b.Property<string>("ExportedField")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmployeeContractExports", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.EmployeeContract.EmployeeContractLocalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("EmployeeContractEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeContractId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeContractEntityId");

                    b.ToTable("EmployeeContractLocalizations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.EmployeeContract.SalaryAllowance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SalaryAllowance", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Insurance.EmployeeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Insurance.ExportInsuranceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExportFormat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExportedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExportedByUserId")
                        .HasColumnType("int");

                    b.Property<int?>("InsuranceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceId");

                    b.ToTable("ExportInsurance", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Insurance.InsuranceAuditEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActionUserAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("InsuranceId")
                        .HasColumnType("int");

                    b.Property<string>("InsuranceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceId");

                    b.ToTable("InsuranceAudit", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Insurance.InsuranceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Branch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("InsuranceName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Insurance", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Insurance.InsuranceLocalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("InsuranceId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InsuranceId");

                    b.ToTable("InsuranceLocalization", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.JobLocation.JobLocationAuditEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActionUserAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<int?>("JobLocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobLocationId");

                    b.ToTable("JobLocationAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.JobLocation.JobLocationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Descriptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<string>("JobLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("JobLocations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.JobLocation.JobLocationExportEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descriptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<string>("JobLocation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobLocationExports", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.JobLocation.JobLocationLocalizationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descriptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("JobLocationId");

                    b.ToTable("JobLocationLocalizations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Loan.AuthorityEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("LoansAuthority", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Loan.LoanAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActionUserAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Dail")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("IP")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(10,7)");

                    b.Property<int?>("LoanId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(10,7)");

                    b.Property<string>("MapURL")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("OS")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool?>("StatusId")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("LoanId");

                    b.ToTable("LoanAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Loan.LoanEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Branch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Installment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("InstallmentPeriod")
                        .HasColumnType("int");

                    b.Property<decimal?>("InterestPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("IqmaId")
                        .HasColumnType("int");

                    b.Property<int?>("IqmaId1")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<int?>("LoanAuditId")
                        .HasColumnType("int");

                    b.Property<string>("LoanDetails")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("LoanExportId")
                        .HasColumnType("int");

                    b.Property<int?>("LoanLocalizationId")
                        .HasColumnType("int");

                    b.Property<string>("LoanStatus")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("PermittedById")
                        .HasColumnType("int");

                    b.Property<decimal?>("RepaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("RepaymentFrom")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IqmaId");

                    b.HasIndex("IqmaId1");

                    b.HasIndex("LoanAuditId");

                    b.HasIndex("LoanExportId");

                    b.HasIndex("LoanLocalizationId");

                    b.HasIndex("PermittedById");

                    b.ToTable("Loans", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Loan.LoanExport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FileType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("LoanId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LoanId");

                    b.ToTable("LoanExports", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Loan.LoanLocalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("LoanId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LoanId");

                    b.ToTable("LoanLocalizations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.LoanType.LoanTypeAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActionUserAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("Draft")
                        .HasColumnType("bit");

                    b.Property<string>("IP")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int?>("LoanTypeId")
                        .HasColumnType("int");

                    b.Property<string>("LoanTypeText")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MapURL")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LoanTypeId");

                    b.ToTable("LoanTypeAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.LoanType.LoanTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("Draft")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("LoanTypeText")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("LoanTypes", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.LoanType.LoanTypeExport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FileType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("LoanTypeId")
                        .HasColumnType("int");

                    b.Property<long?>("SizeBytes")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LoanTypeId");

                    b.ToTable("LoanTypeExports", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.LoanType.LoanTypeLocalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("LoanTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("LoanTypeId");

                    b.ToTable("LoanTypeLocalizations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ProjectContract.ProjectContractAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActionUserAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("Draft")
                        .HasColumnType("bit");

                    b.Property<string>("IP")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("LoanTypeText")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MapURL")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ProjectContractId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectContractId");

                    b.ToTable("ProjectContractAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ProjectContract.ProjectContractEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContractTypeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("ContractValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Customer")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("Draft")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContractTypeId");

                    b.ToTable("ProjectContracts", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ProjectContract.ProjectContractEntity+ContractTypeList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("ProjectContractContractTypeLists", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ProjectContract.ProjectContractExport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasMaxLength(260)
                        .HasColumnType("nvarchar(260)");

                    b.Property<string>("FileType")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FileUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ProjectContractId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectContractId");

                    b.ToTable("ProjectContractExports", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ProjectContract.ProjectContractLocalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProjectContractId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectContractId");

                    b.ToTable("ProjectContractLocalizations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ProjectContractType.ProjectContractTypeAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActionUserAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("Draft")
                        .HasColumnType("bit");

                    b.Property<string>("IP")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("LoanTypeText")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("MapURL")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ProjectContractTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectContractTypeId");

                    b.ToTable("ProjectContractTypeAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ProjectContractType.ProjectContractTypeEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProjectContractTypes", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ProjectContractType.ProjectContractTypeExport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("FileType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("LoanTypeId")
                        .HasColumnType("int");

                    b.Property<long?>("SizeBytes")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LoanTypeId");

                    b.ToTable("ProjectContractTypeExports", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ProjectContractType.ProjectContractTypeLocalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ProjectContractTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectContractTypeId");

                    b.ToTable("ProjectContractTypeLocalizations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Retirement.RetirementAudit", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<DateTime?>("ActionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RetirementId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RetirementId");

                    b.ToTable("RetirementAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Retirement.RetirementEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Branch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Draft")
                        .HasColumnType("bit");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Retirement")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Retirements", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Retirement.RetirementExport", b =>
                {
                    b.Property<string>("BranchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("RetirementExports", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Retirement.RetirementLocalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("RetirementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RetirementId");

                    b.ToTable("RetirementLocalizations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SafetyMaterials.DurationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Durations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SafetyMaterials.SafetyMaterialsAuditEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ActionUserAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<decimal>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MapURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OS")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SafetyMaterialsId")
                        .HasColumnType("int");

                    b.Property<bool>("StatusId")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("SafetyMaterialsId");

                    b.ToTable("SafetyMaterialsAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SafetyMaterials.SafetyMaterialsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DurationId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NextDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DurationId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("SafetyMaterials", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SafetyMaterials.SafetyMaterialsExportEntity", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<DateTime?>("ExportedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExportedBy")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SafetyMaterialsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SafetyMaterialsId");

                    b.ToTable("SafetyMaterialsExports", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SafetyMaterials.SafetyMaterialsLocalizationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SafetyMaterialsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SafetyMaterialsId");

                    b.ToTable("SafetyMaterialsLocalizations");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SalaryAdvance.BranchListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Branch")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BranchList", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SalaryAdvance.IqmaListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IqmaNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IqmaList", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SalaryAdvance.PaymentModeListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PaymentModeList", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SalaryAdvance.SalaryAdvanceAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActionUserAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Dail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MapURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SalaryAdvanceId")
                        .HasColumnType("int");

                    b.Property<bool?>("StatusId")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("SalaryAdvanceId");

                    b.ToTable("SalaryAdvanceAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SalaryAdvance.SalaryAdvanceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("AdvanceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("BranchListEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IqmaId")
                        .HasColumnType("int");

                    b.Property<int?>("IqmaListEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentModeId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentModeListEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("BranchListEntityId");

                    b.HasIndex("IqmaId");

                    b.HasIndex("IqmaListEntityId");

                    b.HasIndex("PaymentModeId");

                    b.HasIndex("PaymentModeListEntityId");

                    b.ToTable("SalaryAdvances", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SalaryAdvance.SalaryAdvanceExport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ExportedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExportedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SalaryAdvanceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalaryAdvanceId");

                    b.ToTable("SalaryAdvanceExports", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SalaryAdvance.SalaryAdvanceLocalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SalaryAdvanceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalaryAdvanceId");

                    b.ToTable("SalaryAdvanceLocalizations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SampleCategory.SampleCategoryAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActionUserAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Dail")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("IP")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Location")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MapURL")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("OS")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool?>("StatusId")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SampleCategoryAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SampleCategory.SampleCategoryEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SampleCategories", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SampleCategory.SampleCategoryExport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExportedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SampleCategoryExports", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SampleCategory.SampleCategoryLocalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SampleCategoryLocalizations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SampleReceiving.CustomerListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("CustomerLists", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SampleReceiving.DeliveredListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("DeliveredLists", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SampleReceiving.ReceiverListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("ReceiverLists", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SampleReceiving.SampleReceivedAuditEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActionUserAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Code")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<string>("Dail")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("IP")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Location")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MapURL")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("OS")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<int?>("ReceivedId")
                        .HasColumnType("int");

                    b.Property<bool?>("StatusId")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ReceivedId");

                    b.ToTable("SampleReceivedAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SampleReceiving.SampleReceivedExportEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ExportedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("FilePath")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ReceivedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceivedId");

                    b.ToTable("SampleReceivedExports", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SampleReceiving.SampleReceivedLocalizationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("ReceivedId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReceivedId");

                    b.ToTable("SampleReceivedLocalizations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SampleReceiving.SampleReceivingEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("BranchListEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerListEntityId")
                        .HasColumnType("int");

                    b.Property<string>("CustomerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerReference")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeliveredById")
                        .HasColumnType("int");

                    b.Property<int?>("DeliveredListEntityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("NumberOfSample")
                        .HasColumnType("int");

                    b.Property<string>("OtherNotes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ReceivedById")
                        .HasColumnType("int");

                    b.Property<int?>("ReceiverListEntityId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceivingNo")
                        .HasColumnType("int");

                    b.Property<string>("RequiredTests")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("SectionId")
                        .HasColumnType("int");

                    b.Property<int?>("SectionListEntityId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time");

                    b.Property<string>("TypeOfSample")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("BranchListEntityId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("CustomerListEntityId");

                    b.HasIndex("DeliveredById");

                    b.HasIndex("DeliveredListEntityId");

                    b.HasIndex("ReceivedById");

                    b.HasIndex("ReceiverListEntityId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SectionListEntityId");

                    b.ToTable("SampleReceivings", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SampleReceiving.SectionListEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("SectionLists", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ShiftType.ShiftType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("BreakTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ShiftTypes", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ShiftType.ShiftTypeAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ActionAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ActionTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ActionUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("BreakTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ShiftTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShiftTypeId");

                    b.ToTable("ShiftTypeAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ShiftType.ShiftTypeExport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("ShiftTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ShiftTypeId");

                    b.ToTable("ShiftTypeExports", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ShiftType.ShiftTypeLocalization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeletedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("LocalizedDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ShiftTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ShiftTypeId");

                    b.ToTable("ShiftTypeLocalizations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Tax.TaxAuditEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActionUserAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Dail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("decimal(18,8)");

                    b.Property<string>("MapURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("StatusId")
                        .HasColumnType("bit");

                    b.Property<int?>("TaxEntityId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TaxEntityId");

                    b.ToTable("TaxAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Tax.TaxEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankDetails")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DraftedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IBANNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<decimal>("OpeningBalance")
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Taxes", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Transfer.TransferAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActionAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ActionTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ActionUserId")
                        .HasColumnType("int");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<int?>("FromLocationId")
                        .HasColumnType("int");

                    b.Property<string>("IqamaNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewValuesJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OldValuesJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ToLocationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TransferDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TransferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransferId");

                    b.ToTable("TransferAudits", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Transfer.TransferBranchEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransferBranches", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Transfer.TransferEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Descriptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FromLocationId")
                        .HasColumnType("int");

                    b.Property<string>("IqamaNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ToLocationId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TransferDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Transfers", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Transfer.TransferExport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ExportedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ExportedById")
                        .HasColumnType("int");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TransferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransferId");

                    b.ToTable("TransferExports", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Transfer.TransferFromLocationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransferFromLocations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Transfer.TransferIqamaEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransferIqamas", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Transfer.TransferLocalization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TransferId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TransferId");

                    b.ToTable("TransferLocalizations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Transfer.TransferToLocationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TransferToLocations", (string)null);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Branches.BranchAuditEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Branches.BranchEntity", "Branch")
                        .WithMany("Audits")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Branches.BranchEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Branches.BankListEntity", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RAP.Administrator.Domain.Models.Branches.BankListEntity", null)
                        .WithMany("Branches")
                        .HasForeignKey("BankListEntityId");

                    b.HasOne("RAP.Administrator.Domain.Models.Branches.CompanyListEntity", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RAP.Administrator.Domain.Models.Branches.CompanyListEntity", null)
                        .WithMany("Branches")
                        .HasForeignKey("CompanyListEntityId");

                    b.HasOne("RAP.Administrator.Domain.Models.CandidateList.CountryListEntity", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RAP.Administrator.Domain.Models.CandidateList.CountryListEntity", null)
                        .WithMany("Branches")
                        .HasForeignKey("CountryListEntityId");

                    b.HasOne("RAP.Administrator.Domain.Models.Branches.CurrencyListEntity", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RAP.Administrator.Domain.Models.Branches.CurrencyListEntity", null)
                        .WithMany("Branches")
                        .HasForeignKey("CurrencyListEntityId");

                    b.HasOne("RAP.Administrator.Domain.Models.Branches.InvoiceFormatListEntity", null)
                        .WithMany("Branches")
                        .HasForeignKey("InvoiceFormatListEntityId");

                    b.HasOne("RAP.Administrator.Domain.Models.Branches.InvoiceFormatListEntity", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Bank");

                    b.Navigation("Company");

                    b.Navigation("Country");

                    b.Navigation("Currency");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Branches.BranchExport", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Branches.BranchEntity", "Branch")
                        .WithMany("Exports")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Branches.BranchLocalization", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Branches.BranchEntity", "Branch")
                        .WithMany("Localizations")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Branch");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateList.CandidateListAudit", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.CandidateList.CandidateListEntity", "Candidate")
                        .WithMany("Audits")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateList.CandidateListEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.CandidateList.CountryListEntity", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateList.CandidateListLocalization", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.CandidateList.CandidateListEntity", "Candidate")
                        .WithMany("Localizations")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.CandidateAudit", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.CandidateSelection.ActionType", "ActionType")
                        .WithMany("CandidateAudits")
                        .HasForeignKey("ActionTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RAP.Administrator.Domain.Models.CandidateSelection.CandidateEntity", "Candidate")
                        .WithMany("Audits")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ActionType");

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.CandidateEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.CandidateSelection.Position", "Position")
                        .WithMany("CandidateSelections")
                        .HasForeignKey("PositionId");

                    b.HasOne("RAP.Administrator.Domain.Models.CandidateSelection.Team", "Team")
                        .WithMany("CandidateSelections")
                        .HasForeignKey("TeamId");

                    b.Navigation("Position");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.CandidateExport", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.CandidateSelection.CandidateEntity", "Candidate")
                        .WithMany("Exports")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.CandidateLocalization", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.CandidateSelection.CandidateEntity", "Candidate")
                        .WithMany("Localizations")
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Certificate.CertificateAuditEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Certificate.CertificateEntity", "Certificate")
                        .WithMany("Audits")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Certificate.CertificateEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Certificate.CertificateTypeListEntity", "CertificateType")
                        .WithMany("Certificates")
                        .HasForeignKey("CertificateTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RAP.Administrator.Domain.Models.Insurance.EmployeeEntity", "Employee")
                        .WithMany("Certificates")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("CertificateType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Certificate.CertificateExportEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Certificate.CertificateEntity", "Certificate")
                        .WithMany("Exports")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Certificate.CertificateLocalizationEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Certificate.CertificateEntity", "Certificate")
                        .WithMany("Localizations")
                        .HasForeignKey("CertificateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ContactType.ContactTypeAuditEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.ContactType.ContactTypeEntity", null)
                        .WithMany("Audits")
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ContactType.ContactTypeLocalizationEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.ContactType.ContactTypeEntity", "ContactType")
                        .WithMany("Localizations")
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ContactType");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Divisions.DivisionAudit", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Divisions.Division", "Division")
                        .WithMany("Audits")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Divisions.DivisionExport", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Divisions.Division", "Division")
                        .WithMany("Exports")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Divisions.DivisionLocalization", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Divisions.Division", "Division")
                        .WithMany("Localizations")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Document.DocumentAuditEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Document.DocumentEntity", "Document")
                        .WithMany("Audits")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Document");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Document.DocumentEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Document.OrderByEntity", "OrderBy")
                        .WithMany("Documents")
                        .HasForeignKey("OrderById");

                    b.HasOne("RAP.Administrator.Domain.Models.Document.ShipmentTypeEntity", "ShipmentType")
                        .WithMany("Documents")
                        .HasForeignKey("ShipmentTypeId");

                    b.Navigation("OrderBy");

                    b.Navigation("ShipmentType");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Document.DocumentExportEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Document.DocumentEntity", "Document")
                        .WithMany("Exports")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Document");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Document.DocumentLocalizationEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Document.DocumentEntity", "Document")
                        .WithMany("Localizations")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Document");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.DocumentType.DocumentTypeAudit", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.DocumentType.DocumentTypeEntity", "DocumentType")
                        .WithMany("Audits")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.DocumentType.DocumentTypeEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.DocumentType.DocumentCodeTemplate", "Template")
                        .WithMany("DocumentTypes")
                        .HasForeignKey("TemplateId");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.DocumentType.DocumentTypeExport", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.DocumentType.DocumentTypeEntity", "DocumentType")
                        .WithMany("Exports")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.DocumentType.DocumentTypeLocalization", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.DocumentType.DocumentTypeEntity", "DocumentType")
                        .WithMany("Localizations")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("DocumentType");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.EmployeeContract.EmployeeContractAudit", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.EmployeeContract.EmployeeContractEntity", null)
                        .WithMany("Audits")
                        .HasForeignKey("EmployeeContractEntityId");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.EmployeeContract.EmployeeContractEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.EmployeeContract.ContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RAP.Administrator.Domain.Models.EmployeeContract.ContactType", null)
                        .WithMany("EmployeeContracts")
                        .HasForeignKey("ContactTypeId1");

                    b.HasOne("RAP.Administrator.Domain.Models.EmployeeContract.ContractStatus", null)
                        .WithMany("EmployeeContracts")
                        .HasForeignKey("ContractStatusId");

                    b.HasOne("RAP.Administrator.Domain.Models.Insurance.EmployeeEntity", null)
                        .WithMany("EmployeeContracts")
                        .HasForeignKey("EmployeeEntityId");

                    b.HasOne("RAP.Administrator.Domain.Models.EmployeeContract.SalaryAllowance", "SalaryAllowance")
                        .WithMany()
                        .HasForeignKey("SalaryAllowanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RAP.Administrator.Domain.Models.EmployeeContract.SalaryAllowance", null)
                        .WithMany("EmployeeContracts")
                        .HasForeignKey("SalaryAllowanceId1");

                    b.HasOne("RAP.Administrator.Domain.Models.Insurance.EmployeeEntity", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RAP.Administrator.Domain.Models.EmployeeContract.ContractStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ContactType");

                    b.Navigation("SalaryAllowance");

                    b.Navigation("Staff");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.EmployeeContract.EmployeeContractLocalization", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.EmployeeContract.EmployeeContractEntity", null)
                        .WithMany("Localizations")
                        .HasForeignKey("EmployeeContractEntityId");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Insurance.ExportInsuranceEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Insurance.InsuranceEntity", "Insurance")
                        .WithMany("ExportInsurances")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Insurance.InsuranceAuditEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Insurance.InsuranceEntity", "Insurance")
                        .WithMany("Audits")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Insurance.InsuranceEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Insurance.EmployeeEntity", "Employee")
                        .WithMany("Insurances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Insurance.InsuranceLocalization", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Insurance.InsuranceEntity", "Insurance")
                        .WithMany("Localizations")
                        .HasForeignKey("InsuranceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Insurance");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.JobLocation.JobLocationAuditEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.JobLocation.JobLocationEntity", "JobLocation")
                        .WithMany("Audits")
                        .HasForeignKey("JobLocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("JobLocation");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.JobLocation.JobLocationEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.CandidateList.CountryListEntity", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.JobLocation.JobLocationLocalizationEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.JobLocation.JobLocationEntity", "JobLocation")
                        .WithMany("Localizations")
                        .HasForeignKey("JobLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("JobLocation");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Loan.LoanAudit", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Loan.LoanEntity", "Loan")
                        .WithMany("Audits")
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Loan");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Loan.LoanEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Transfer.TransferIqamaEntity", null)
                        .WithMany()
                        .HasForeignKey("IqmaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RAP.Administrator.Domain.Models.SalaryAdvance.IqmaListEntity", "Iqma")
                        .WithMany("Loans")
                        .HasForeignKey("IqmaId1");

                    b.HasOne("RAP.Administrator.Domain.Models.Loan.LoanAudit", null)
                        .WithMany("Loans")
                        .HasForeignKey("LoanAuditId");

                    b.HasOne("RAP.Administrator.Domain.Models.Loan.LoanExport", null)
                        .WithMany("Loans")
                        .HasForeignKey("LoanExportId");

                    b.HasOne("RAP.Administrator.Domain.Models.Loan.LoanLocalization", null)
                        .WithMany("Loans")
                        .HasForeignKey("LoanLocalizationId");

                    b.HasOne("RAP.Administrator.Domain.Models.Loan.AuthorityEntity", "Authority")
                        .WithMany("Loans")
                        .HasForeignKey("PermittedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Authority");

                    b.Navigation("Iqma");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Loan.LoanExport", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Loan.LoanEntity", "Loan")
                        .WithMany("Exports")
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Loan");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Loan.LoanLocalization", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Loan.LoanEntity", "Loan")
                        .WithMany("Localizations")
                        .HasForeignKey("LoanId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Loan");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.LoanType.LoanTypeAudit", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.LoanType.LoanTypeEntity", "LoanType")
                        .WithMany("Audits")
                        .HasForeignKey("LoanTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LoanType");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.LoanType.LoanTypeExport", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.LoanType.LoanTypeEntity", "LoanType")
                        .WithMany("Exports")
                        .HasForeignKey("LoanTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LoanType");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.LoanType.LoanTypeLocalization", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.LoanType.LoanTypeEntity", "LoanType")
                        .WithMany("Localizations")
                        .HasForeignKey("LoanTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LoanType");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ProjectContract.ProjectContractAudit", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.ProjectContract.ProjectContractEntity", "ProjectContract")
                        .WithMany("Audits")
                        .HasForeignKey("ProjectContractId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ProjectContract");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ProjectContract.ProjectContractEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.ProjectContract.ProjectContractEntity+ContractTypeList", "ContractType")
                        .WithMany("ProjectContracts")
                        .HasForeignKey("ContractTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ContractType");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ProjectContract.ProjectContractExport", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.ProjectContract.ProjectContractEntity", "ProjectContract")
                        .WithMany("Exports")
                        .HasForeignKey("ProjectContractId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ProjectContract");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ProjectContract.ProjectContractLocalization", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.ProjectContract.ProjectContractEntity", "ProjectContract")
                        .WithMany("Localizations")
                        .HasForeignKey("ProjectContractId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ProjectContract");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ProjectContractType.ProjectContractTypeAudit", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.ProjectContractType.ProjectContractTypeEntity", "ProjectContractType")
                        .WithMany("Audits")
                        .HasForeignKey("ProjectContractTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ProjectContractType");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ProjectContractType.ProjectContractTypeExport", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.ProjectContractType.ProjectContractTypeEntity", "ProjectContractType")
                        .WithMany("Exports")
                        .HasForeignKey("LoanTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ProjectContractType");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ProjectContractType.ProjectContractTypeLocalization", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.ProjectContractType.ProjectContractTypeEntity", "ProjectContractType")
                        .WithMany("Localizations")
                        .HasForeignKey("ProjectContractTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ProjectContractType");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Retirement.RetirementAudit", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Retirement.RetirementEntity", "Retirement")
                        .WithMany("Audits")
                        .HasForeignKey("RetirementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Retirement");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Retirement.RetirementEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Insurance.EmployeeEntity", null)
                        .WithMany("Retirement")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Retirement.RetirementLocalization", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Retirement.RetirementEntity", "Retirement")
                        .WithMany("Localizations")
                        .HasForeignKey("RetirementId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Retirement");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SafetyMaterials.SafetyMaterialsAuditEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.SafetyMaterials.SafetyMaterialsEntity", "SafetyMaterials")
                        .WithMany("Audits")
                        .HasForeignKey("SafetyMaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SafetyMaterials");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SafetyMaterials.SafetyMaterialsEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.SafetyMaterials.DurationEntity", "Duration")
                        .WithMany("SafetyMaterials")
                        .HasForeignKey("DurationId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RAP.Administrator.Domain.Models.Insurance.EmployeeEntity", "Employee")
                        .WithMany("SafetyMaterials")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Duration");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SafetyMaterials.SafetyMaterialsExportEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.SafetyMaterials.SafetyMaterialsEntity", "SafetyMaterials")
                        .WithMany("Exports")
                        .HasForeignKey("SafetyMaterialsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("SafetyMaterials");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SafetyMaterials.SafetyMaterialsLocalizationEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.SafetyMaterials.SafetyMaterialsEntity", "SafetyMaterials")
                        .WithMany("Localizations")
                        .HasForeignKey("SafetyMaterialsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("SafetyMaterials");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SalaryAdvance.SalaryAdvanceAudit", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.SalaryAdvance.SalaryAdvanceEntity", "SalaryAdvance")
                        .WithMany("Audits")
                        .HasForeignKey("SalaryAdvanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("SalaryAdvance");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SalaryAdvance.SalaryAdvanceEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.SalaryAdvance.BranchListEntity", "Branches")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RAP.Administrator.Domain.Models.SalaryAdvance.BranchListEntity", null)
                        .WithMany("SalaryAdvances")
                        .HasForeignKey("BranchListEntityId");

                    b.HasOne("RAP.Administrator.Domain.Models.SalaryAdvance.IqmaListEntity", "Iqma")
                        .WithMany()
                        .HasForeignKey("IqmaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RAP.Administrator.Domain.Models.SalaryAdvance.IqmaListEntity", null)
                        .WithMany("SalaryAdvances")
                        .HasForeignKey("IqmaListEntityId");

                    b.HasOne("RAP.Administrator.Domain.Models.SalaryAdvance.PaymentModeListEntity", "PaymentMode")
                        .WithMany()
                        .HasForeignKey("PaymentModeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RAP.Administrator.Domain.Models.SalaryAdvance.PaymentModeListEntity", null)
                        .WithMany("SalaryAdvances")
                        .HasForeignKey("PaymentModeListEntityId");

                    b.Navigation("Branches");

                    b.Navigation("Iqma");

                    b.Navigation("PaymentMode");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SalaryAdvance.SalaryAdvanceExport", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.SalaryAdvance.SalaryAdvanceEntity", "SalaryAdvance")
                        .WithMany()
                        .HasForeignKey("SalaryAdvanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("SalaryAdvance");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SalaryAdvance.SalaryAdvanceLocalization", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.SalaryAdvance.SalaryAdvanceEntity", "SalaryAdvance")
                        .WithMany("Localizations")
                        .HasForeignKey("SalaryAdvanceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("SalaryAdvance");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SampleCategory.SampleCategoryAudit", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.SampleCategory.SampleCategoryEntity", "SampleCategories")
                        .WithMany("Audits")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("SampleCategories");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SampleCategory.SampleCategoryExport", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.SampleCategory.SampleCategoryEntity", "SampleCategories")
                        .WithMany("Exports")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("SampleCategories");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SampleCategory.SampleCategoryLocalization", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.SampleCategory.SampleCategoryEntity", "SampleCategories")
                        .WithMany("Localizations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("SampleCategories");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SampleReceiving.SampleReceivedAuditEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.SampleReceiving.SampleReceivingEntity", "SampleReceivings")
                        .WithMany("Audits")
                        .HasForeignKey("ReceivedId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("SampleReceivings");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SampleReceiving.SampleReceivedExportEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.SampleReceiving.SampleReceivingEntity", "SampleReceivings")
                        .WithMany("Exports")
                        .HasForeignKey("ReceivedId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("SampleReceivings");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SampleReceiving.SampleReceivedLocalizationEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.SampleReceiving.SampleReceivingEntity", "SampleReceivings")
                        .WithMany("Localizations")
                        .HasForeignKey("ReceivedId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("SampleReceivings");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SampleReceiving.SampleReceivingEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.SalaryAdvance.BranchListEntity", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RAP.Administrator.Domain.Models.SalaryAdvance.BranchListEntity", null)
                        .WithMany("SampleReceivings")
                        .HasForeignKey("BranchListEntityId");

                    b.HasOne("RAP.Administrator.Domain.Models.SampleReceiving.CustomerListEntity", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RAP.Administrator.Domain.Models.SampleReceiving.CustomerListEntity", null)
                        .WithMany("SampleReceivings")
                        .HasForeignKey("CustomerListEntityId");

                    b.HasOne("RAP.Administrator.Domain.Models.SampleReceiving.DeliveredListEntity", "DeliveredBy")
                        .WithMany()
                        .HasForeignKey("DeliveredById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RAP.Administrator.Domain.Models.SampleReceiving.DeliveredListEntity", null)
                        .WithMany("SampleReceivingsDelivered")
                        .HasForeignKey("DeliveredListEntityId");

                    b.HasOne("RAP.Administrator.Domain.Models.SampleReceiving.ReceiverListEntity", "ReceivedBy")
                        .WithMany()
                        .HasForeignKey("ReceivedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RAP.Administrator.Domain.Models.SampleReceiving.ReceiverListEntity", null)
                        .WithMany("SampleReceivingsReceived")
                        .HasForeignKey("ReceiverListEntityId");

                    b.HasOne("RAP.Administrator.Domain.Models.SampleReceiving.SectionListEntity", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RAP.Administrator.Domain.Models.SampleReceiving.SectionListEntity", null)
                        .WithMany("SampleReceivings")
                        .HasForeignKey("SectionListEntityId");

                    b.Navigation("Branch");

                    b.Navigation("Customer");

                    b.Navigation("DeliveredBy");

                    b.Navigation("ReceivedBy");

                    b.Navigation("Section");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ShiftType.ShiftTypeAudit", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.ShiftType.ShiftType", "ShiftType")
                        .WithMany("Audits")
                        .HasForeignKey("ShiftTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShiftType");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ShiftType.ShiftTypeExport", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.ShiftType.ShiftType", "ShiftType")
                        .WithMany("Exports")
                        .HasForeignKey("ShiftTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShiftType");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ShiftType.ShiftTypeLocalization", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.ShiftType.ShiftType", "ShiftType")
                        .WithMany("Localizations")
                        .HasForeignKey("ShiftTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShiftType");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Tax.TaxAuditEntity", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Tax.TaxEntity", null)
                        .WithMany("Audits")
                        .HasForeignKey("TaxEntityId");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Transfer.TransferAudit", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Transfer.TransferEntity", "Transfer")
                        .WithMany("Audits")
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Transfer.TransferExport", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Transfer.TransferEntity", "Transfer")
                        .WithMany("Exports")
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Transfer.TransferLocalization", b =>
                {
                    b.HasOne("RAP.Administrator.Domain.Models.Transfer.TransferEntity", "Transfer")
                        .WithMany("Localizations")
                        .HasForeignKey("TransferId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Transfer");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Branches.BankListEntity", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Branches.BranchEntity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Exports");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Branches.CompanyListEntity", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Branches.CurrencyListEntity", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Branches.InvoiceFormatListEntity", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateList.CandidateListEntity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateList.CountryListEntity", b =>
                {
                    b.Navigation("Branches");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.ActionType", b =>
                {
                    b.Navigation("CandidateAudits");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.CandidateEntity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Exports");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.Position", b =>
                {
                    b.Navigation("CandidateSelections");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.CandidateSelection.Team", b =>
                {
                    b.Navigation("CandidateSelections");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Certificate.CertificateEntity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Exports");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Certificate.CertificateTypeListEntity", b =>
                {
                    b.Navigation("Certificates");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ContactType.ContactTypeEntity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Divisions.Division", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Exports");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Document.DocumentEntity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Exports");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Document.OrderByEntity", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Document.ShipmentTypeEntity", b =>
                {
                    b.Navigation("Documents");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.DocumentType.DocumentCodeTemplate", b =>
                {
                    b.Navigation("DocumentTypes");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.DocumentType.DocumentTypeEntity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Exports");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.EmployeeContract.ContactType", b =>
                {
                    b.Navigation("EmployeeContracts");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.EmployeeContract.ContractStatus", b =>
                {
                    b.Navigation("EmployeeContracts");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.EmployeeContract.EmployeeContractEntity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.EmployeeContract.SalaryAllowance", b =>
                {
                    b.Navigation("EmployeeContracts");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Insurance.EmployeeEntity", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("EmployeeContracts");

                    b.Navigation("Insurances");

                    b.Navigation("Retirement");

                    b.Navigation("SafetyMaterials");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Insurance.InsuranceEntity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("ExportInsurances");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.JobLocation.JobLocationEntity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Loan.AuthorityEntity", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Loan.LoanAudit", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Loan.LoanEntity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Exports");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Loan.LoanExport", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Loan.LoanLocalization", b =>
                {
                    b.Navigation("Loans");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.LoanType.LoanTypeEntity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Exports");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ProjectContract.ProjectContractEntity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Exports");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ProjectContract.ProjectContractEntity+ContractTypeList", b =>
                {
                    b.Navigation("ProjectContracts");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ProjectContractType.ProjectContractTypeEntity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Exports");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Retirement.RetirementEntity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SafetyMaterials.DurationEntity", b =>
                {
                    b.Navigation("SafetyMaterials");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SafetyMaterials.SafetyMaterialsEntity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Exports");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SalaryAdvance.BranchListEntity", b =>
                {
                    b.Navigation("SalaryAdvances");

                    b.Navigation("SampleReceivings");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SalaryAdvance.IqmaListEntity", b =>
                {
                    b.Navigation("Loans");

                    b.Navigation("SalaryAdvances");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SalaryAdvance.PaymentModeListEntity", b =>
                {
                    b.Navigation("SalaryAdvances");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SalaryAdvance.SalaryAdvanceEntity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SampleCategory.SampleCategoryEntity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Exports");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SampleReceiving.CustomerListEntity", b =>
                {
                    b.Navigation("SampleReceivings");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SampleReceiving.DeliveredListEntity", b =>
                {
                    b.Navigation("SampleReceivingsDelivered");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SampleReceiving.ReceiverListEntity", b =>
                {
                    b.Navigation("SampleReceivingsReceived");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SampleReceiving.SampleReceivingEntity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Exports");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.SampleReceiving.SectionListEntity", b =>
                {
                    b.Navigation("SampleReceivings");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.ShiftType.ShiftType", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Exports");

                    b.Navigation("Localizations");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Tax.TaxEntity", b =>
                {
                    b.Navigation("Audits");
                });

            modelBuilder.Entity("RAP.Administrator.Domain.Models.Transfer.TransferEntity", b =>
                {
                    b.Navigation("Audits");

                    b.Navigation("Exports");

                    b.Navigation("Localizations");
                });
#pragma warning restore 612, 618
        }
    }
}
